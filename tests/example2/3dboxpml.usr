c-----------------------------------------------------------------------
c
c     Box geometry with a PML on the boundary and a dipole source.
c
c-----------------------------------------------------------------------
      subroutine userinc(tt,incfhx,incfhy,incfhz,incfex,incfey,incfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real incfhx(lxzfl),incfhy(lxzfl),incfhz(lxzfl)
      real incfex(lxzfl),incfey(lxzfl),incfez(lxzfl)

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,solhx,solhy,solhz,solex,soley,solez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real solhx(lpts),solhy(lpts),solhz(lpts)
      real solex(lpts),soley(lpts),solez(lpts)

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(tt,srchx,srchy,srchz,srcex,srcey,srcez)
c-----------------------------------------------------------------------
c     Gaussian approximation to a Hertzian dipole. The current
c     distribution from the dipole is
c
c     J(r) = I0*d*delta(r)*exp(-i*omega*t)
c
c     where the current is I0*exp(-i*omega*t) and d is the direction of
c     the dipole. We replace delta(r) by a Gaussian for computational
c     purposes.
      implicit none
      include 'SIZE'
      include 'GEOM'
      include 'MASS'
      include 'EMWAVE'

      real tt
      real srchx(lpts),srchy(lpts),srchz(lpts)
      real srcex(lpts),srcey(lpts),srcez(lpts)

      real tfac,tconst,xx,yy,zz,xfac,yfac,zfac
      real omega,width
      parameter (omega = 2.0, width = 0.1)
      real xloc,yloc,zloc
      parameter (xloc = 0.0, yloc = 0.0, zloc = 0.0)
c     Normalization constant
      real norm
      parameter (norm = 1.0/(sqrt(8*atan(1.0))*width)**3)
      real i0
      parameter (i0 = 1.0/norm)

      integer i,n

      n = nx1*ny1*nz1*nelt

!$ACC DATA PRESENT(srchx,srchy,srchz,srcex,srcey,srcez)
!$ACC&     PRESENT(xm1,ym1,zm1,bm1)

      tfac = sin(-omega*tt)

!$ACC PARALLEL LOOP GANG WORKER VECTOR
      do i = 1,n
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         zz = zm1(i,1,1,1)

         tconst  = tfac*bm1(i,1,1,1)
         xfac = -0.5*((xx-xloc)/width)**2
         yfac = -0.5*((yy-yloc)/width)**2
         zfac = -0.5*((zz-zloc)/width)**2

         srcez(i) = srcez(i)-i0*norm*exp(xfac+yfac+zfac)*tconst
      enddo
!$ACC END PARALLEL LOOP

!$ACC END DATA

      return
      end
c-----------------------------------------------------------------------
      subroutine userfsrc(tt,srcfhx,srcfhy,srcfhz,srcfex,srcfey,srcfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srcfhx(lxzfl),srcfhy(lxzfl),srcfhz(lxzfl)
      real srcfex(lxzfl),srcfey(lxzfl),srcfez(lxzfl)

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt,hx,hy,hz,ex,ey,ez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real hx(lpts),hy(lpts),hz(lpts)
      real ex(lpts),ey(lpts),ez(lpts)

      integer i,n

      n = nx1*ny1*nz1*nelt

!$ACC DATA PRESENT(hx,hy,hz,ex,ey,ez)

!$ACC PARALLEL LOOP GANG WORKER VECTOR
      do i=1,n
         hx(i)=0
         hy(i)=0
         hz(i)=0
         ex(i)=0
         ey(i)=0
         ez(i)=0
      enddo
!$ACC END PARALLEL LOOP

!$ACC END DATA

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,iel)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

c     These don't do anything! This is a temporary measure until
c
c     https://github.com/NekCEM/NekCEM/issues/12
c
c     is resolved.
      integer ix,iy,iz,iel

      integer i

      do i = 1,npts
         permittivity(i) = 1.0
         permeability(i) = 1.0
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
c-----------------------------------------------------------------------
      implicit none

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      integer i,n
      real sx,sy,sz
      real glmin,glmax
      real xmin,ymin,zmin
      real xmax,ymax,zmax

      sx = 2.0
      sy = 2.0
      sz = 2.0

      n = nx1*ny1*nz1*nelt

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      do i = 1,n
         xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)/(xmax-xmin)-sx/2.0
         ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)/(ymax-ymin)-sy/2.0
         zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)/(zmax-zmin)-sz/2.0
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'RTIMER'

      integer i,npts3
      real l2(6),linf(6)
      real l2tol(6),linftol(6)

      l2tol(1) = 1.0
      l2tol(2) = 1.0
      l2tol(3) = 1.0
      l2tol(4) = 1.0
      l2tol(5) = 1.0
      l2tol(6) = 1.0

      linftol(1) = 1.0
      linftol(2) = 1.0
      linftol(3) = 1.0
      linftol(4) = 1.0
      linftol(5) = 1.0
      linftol(6) = 1.0

      npts3 = 3*npts
      if (istep.eq.0) then
         call rzero(shn,npts3)
         call rzero(sen,npts3)
      endif

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then

!$ACC UPDATE HOST(hn,en,shn,sen)
         call cem_error(hn(1,1),shn(1,1),errhn(1,1),npts,l2(1),linf(1))
         call cem_error(hn(1,2),shn(1,2),errhn(1,2),npts,l2(2),linf(2))
         call cem_error(hn(1,3),shn(1,3),errhn(1,3),npts,l2(3),linf(3))
         call cem_error(en(1,1),sen(1,1),erren(1,1),npts,l2(4),linf(4))
         call cem_error(en(1,2),sen(1,2),erren(1,2),npts,l2(5),linf(5))
         call cem_error(en(1,3),sen(1,3),erren(1,3),npts,l2(6),linf(6))

         call userprint(istep,time,dt,l2,linf,cpu_t,cpu_p_t)

c     We're checking that the field amplitude doesn't grow
         do i = 1,6
            if (l2(i).gt.l2tol(i)) call exitt(1)
            if (linf(i).gt.linftol(i)) call exitt(1)
         enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userprint(istep,tt,dt,l2,linf,t1,t2)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      integer istep
      real tt,dt,t1,t2
      real l2(6),linf(6)

      integer k

      if (nid.eq.0) then
         write(6,101) istep,nelt,nx1-1,npts,tt,dt,(l2(k),k=1,6),t1,t2
         write(6,102) istep,nelt,nx1-1,npts,tt,dt,(linf(k),k=1,6),t1,t2
      endif

 101  format(/,i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: L2')
 102  format(  i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: Linf')

      return
      end
c-----------------------------------------------------------------------
