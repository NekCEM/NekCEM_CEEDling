#!/bin/bash

set -e

DBG=
REQ_WALLTIME="00:30:00" # short enough for short queue on BGL
# PROJECT="NEK5000"
# PROJECT="NEKCEM"
# PROJECT="GasJetsCyl_tesp"
# PROJECT="NTI104"
# PROJECT="CEED_ECPAD"
PROJECT="Comp_Perf_Workshop"

if [ $2 -gt 1024 ]; then
PROSIZE="prod"
REQ_WALLTIME="00:40:00"
else
PROSIZE="prod-devel"
REQ_WALLTIME="00:10:00"
fi
SUBMIT_ARGS=""
WAIT="0"
while true; do
  case "$1" in
    -h|--help )
      echo "Usage: $0 [options] [.rea stem]"
      echo
      echo "Usable options:"
      echo "-h --help: Get help"
      echo "-d --debug: Run in debugger"
      echo "-n|--nodes N: Set number of nodes to N"
      echo "-t NN:NN:NN: requested amount of computer time"
      echo "-s|--submit-args \"-arg1 -arg2\" extra arguments to qsub"
      echo "-w|--wait wait until job is completed"
      exit 1
      shift
      ;;
    -d|--debug )
      echo "*** running in debugger"
      DBG="gdb"
      shift
      ;;
    -n|-nodes|--nodes )
      shift
      CORECOUNT="$1"
      shift
      ;;
    -t )
      shift
      REQ_WALLTIME="$1"
      shift
      ;;
    -s|--submit-args )
      shift
      SUBMIT_ARGS="$1"
      shift
      ;;
    -w|--wait )
      shift
      WAIT="1"
      ;;
    * )
      break
      ;;
  esac
done

rm -f xxt_map.rea

# automatically find .rea file, if unique
if test "$1" = ""; then
  COUNTREA=`ls *.rea | wc -l`
  if test $COUNTREA = 1; then
    REAFILE=`ls *.rea`
    echo "*** found only $REAFILE, picking that one"
  else
    echo "Must specify .rea file; there is more than one here:"
    ls *.rea | cat
    exit 1
  fi
else
  REAFILE=$1
  CORECOUNT=$2
fi

SESSION=${REAFILE%.rea}
cat <<EOF > SESSION.NAME
$SESSION
$(pwd)/
EOF

rm -f vtk/*

if    test -d /lustre  ; then  # running on OLCF Cray

#        rm $SESSION.pbs
        rm -f logfile
        rm -f $SESSION.np=$CORECOUNT.output
        OUTFILE="`pwd`/$SESSION.np=$CORECOUNT-cray-`date "+%F_%H_%M_%S"`"
        touch $SESSION.rea
        touch $OUTFILE.output
        ln $OUTFILE.output $SESSION.np=$CORECOUNT.output
        ln $OUTFILE.output logfile

        mkdir -p vtk

        if ! pbsfile=`mktemp $SESSION.pbs.XXXXXX` ; then
           echo "Failed to create temp file for qsub! Exiting"
           exit 1
        fi
        chmod 777 $pbsfile

        # dump out the information needed to the pbs file
        # TODO: this feels REALLY clunky. There should be a better way..
        echo "#!/bin/csh" >> $pbsfile
        echo "#PBS -A $PROJECT" >> $pbsfile
        echo "#PBS -N $SESSION" >> $pbsfile
        echo "#PBS -o $PWD/$SESSION.np=$CORECOUNT-cray-`date "+%F_%H_%M_%S"`.output" >> $pbsfile
        echo "#PBS -e $PWD/$SESSION.np=$CORECOUNT-cray-`date "+%F_%H_%M_%S"`.error" >> $pbsfile
        echo "#PBS -l walltime=$REQ_WALLTIME,nodes=$3" >> $pbsfile
        echo "#PBS -j oe" >> $pbsfile
        echo " cd `pwd`">> $pbsfile
        echo " aprun -n $CORECOUNT ./nekcem ">> $pbsfile

        #craypat: profiling below
        #echo " aprun -n $CORECOUNT ./nekcem+pat ">> $pbsfile

        qsub $pbsfile
        rm $pbsfile
        echo "job submitted on OLCF Cray, #MPI_ranks=$CORECOUNT, #Cray_nodes=$3"
        qstat -a|grep $USER

elif  test -d /bgsys; then  # running on BG/Q

  if test -d /gpfs; then # TODO: change this when Mira comes online

      if test "$CORECOUNT" = ""; then
	  CORECOUNT=4
	  echo "*** defaulting to $CORECOUNT nodes on bgq"
      fi
      echo "*** running on bgq with $CORECOUNT cores per node "

      rm -f $SESSION.output
      rm -f logfile
      rm -f xxt_map.rea

      OUTFILE="`pwd`/$SESSION.np=$CORECOUNT-bgq-`date "+%F_%H_%M_%S"`"
      touch $SESSION.rea
      touch $OUTFILE.output
      ln $OUTFILE.output $SESSION.output
      ln $OUTFILE.output logfile

      rm -Rf vtk
      mkdir -p vtk

      echo "qsub  -node $3  --mode c$CORECOUNT -A $PROJECT -t $REQ_WALLTIME -O $OUTFILE nekcem"
      COBALTJOB=`qsub -n $3  --mode c$CORECOUNT -A $PROJECT -t $REQ_WALLTIME -O $OUTFILE nekcem`
      echo "=== cobalt job $COBALTJOB submitted to veas"

  else

      if test "$CORECOUNT" = ""; then
	  CORECOUNT=4
	  echo "*** defaulting to $CORECOUNT nodes on bgp"
      fi
      echo "*** running on bgp with $CORECOUNT nodes"

      rm -f $SESSION.output
      rm -f logfile
      rm -f xxt_map.rea

      OUTFILE="`pwd`/$SESSION.np=$CORECOUNT-bgsys-`date "+%F_%H_%M_%S"`"
      touch $SESSION.rea
      touch $OUTFILE.output
      ln $OUTFILE.output $SESSION.output
      ln $OUTFILE.output logfile

      rm -Rf vtk
      mkdir -p vtk

      echo "cqsub  -n $CORECOUNT -m vn -p $PROJECT -q $PROSIZE -e BG_MAPPING=TXYZ -t $REQ_WALLTIME -O $OUTFILE nekcem"
      COBALTJOB=`cqsub -n $CORECOUNT -m vn -p $PROJECT -q $PROSIZE -e BG_MAPPING=TXYZ -t $REQ_WALLTIME -O $OUTFILE nekcem`
      echo "=== cobalt job $COBALTJOB submitted"

  fi

  if test "$WAIT" = "1"; then
    echo "... waiting for job, step 1 "
    zinfo -c $COBALTJOB -w > /dev/null || true
    echo "... waiting for job, step 2"
    zinfo -c $COBALTJOB -e > /dev/null || true
    echo "... waiting for job, step 3"
    while cqstat | grep $COBALTJOB > /dev/null; do
      sleep 1
    done
    echo "--------------------"
    echo "last_error contains:"
    echo "--------------------"
    cat last_error
    echo "--------------------"
    echo "last_output contains:"
    echo "--------------------"
    cat last_output
    echo "=== job finished"
  fi


elif test -d /fusion ; then

  rm    -Rf vtk
  mkdir -p  vtk

  if test "$PBS_NODEFILE" != ""; then
    if test "$CORECOUNT" = ""; then
      CORECOUNT="`cat $PBS_NODEFILE | wc -l`"
    fi
    echo "*** running on fusion with $CORECOUNT nodes"
    mpirun -np $CORECOUNT -machinefile $PBS_NODEFILE ./nekcem
  else
    echo "*** running on fusion in non-interactive mode"
        if ! pbsfile=`mktemp $SESSION.XXXXXX` ; then
           echo "Failed to create temp file for qsub! Exiting"
           exit 1
        fi
        chmod 777 $pbsfile

        if test "$CORECOUNT" = ""; then
         CORECOUNT=1
          echo "*** defaulting to $CORECOUNT nodes on Jazz"
        fi

        # dump out the information needed to the pbs file
        # TODO: this feels REALLY clunky. There should be a better way..
        echo "#!`which bash`" >> $pbsfile
        echo "#PBS -l nodes=$CORECOUNT:ppn=8 -I" >> $pbsfile
        echo "#PBS -l walltime=$REQ_WALLTIME" >> $pbsfile
        echo "#PBS -o $PWD/$SESSION-$CORECOUNT.output" >> $pbsfile
        echo "#PBS -e $PWD/$SESSION-$CORECOUNT.error" >> $pbsfile

        # combine output and error
        echo "#PBS -j oe" >> $pbsfile

        # tells PBS to send an email; disable if unwanted
        # echo "#PBS -m abe" >> $pbsfile

        # check if the session starts with a number.
        # If so, qsub freaks out and
        # so we need to append something to the start so it all works
        sess=$SESSION
        startChar=${sess:0:1}
        if [ $startChar -eq $startChar 2>/dev/null ]; then
             sess="job_$sess"
        fi
        echo "#PBS -N $sess" >> $pbsfile
        echo 'export NN=`wc -l $PBS_NODEFILE | awk \
             '\''{print $1}'\''` ' >> $pbsfile
        echo 'EXE=$PBS_O_WORKDIR/nekcem' >> $pbsfile
        echo 'mpirun -np $NN -wd $PBS_O_WORKDIR \
              -machinefile $PBS_NODEFILE $EXE ' >> $pbsfile

        echo "running job with pbs file " $pbsfile
        qsub $pbsfile
        rm $pbsfile
  fi
elif [[ $HOSTNAME =~ .*theta.* ]]; then
    QSUBSCRIPT=$(mktemp -p $PWD)
    cat <<EOF > $QSUBSCRIPT
#!/bin/bash
aprun -n $CORECOUNT -d 2 -cc depth -j 1 ./nekcem
EOF
    chmod a+x $QSUBSCRIPT
    qsub -A $PROJECT -t $REQ_WALLTIME -q default -n $3 \
	-o logfile $QSUBSCRIPT
else
    if test "$2" = ""; then
	echo "This is to run with MPI: must specify np# $2"
	exit 1
    fi

    echo "Job to be submitted with np=$2 $SESSION"
    mpiexec -np $2 ./nekcem $SESSION > $SESSION.np=$2.output
fi
