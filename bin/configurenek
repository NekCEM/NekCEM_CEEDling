#!/usr/bin/env python
#
# Configure script for NekCEM.
from __future__ import division, print_function, absolute_import

import os
import shutil
import subprocess
import argparse
import json
import tempfile

NEK = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')
NEK = os.path.abspath(NEK)
EXAMPLE = os.getcwd()

BLANK_PROGRAM = """\
      program dummy
      end
"""


class CompilerError(Exception):
    pass


def get_archflags(arch):
    path = os.path.join(NEK, 'bin', 'arch.json')
    with open(path) as json_data:
        data = json.load(json_data)
    settings = data[arch]
    FC = settings['FC']
    FFLAGS = settings['FFLAGS']
    CC = settings['CC']
    CFLAGS = settings['CFLAGS']
    LD = settings['LD']
    LDFLAGS = settings['LDFLAGS']
    return FC, FFLAGS, CC, CFLAGS, LD, LDFLAGS


def test_FC_compile(FC):
    fd, tmppath = tempfile.mkstemp(suffix='.f')
    with open(tmppath, 'w+') as f:
        f.write(BLANK_PROGRAM)
    os.close(fd)
    exepath = tmppath + '.out'

    # `pgfortran` is unhappy if you run it with `--version` but don't
    # give it a file to compile. If you run `gfortran` with
    # `--version` is won't compile any files passed in.
    with open(os.devnull, 'w') as null:
        try:
            cmd = [FC, '--version', tmppath, '-o', exepath]
            info = subprocess.check_output(cmd, stdin=null, stderr=null,
                                           universal_newlines=True)
        except subprocess.CalledProcessError:
            raise CompilerError("Compiler not found")
        finally:
            os.remove(tmppath)
            if os.path.isfile(exepath):
                os.remove(exepath)
    return info


def configure(FC, CC, LD, FFLAGS, CFLAGS, LDFLAGS):
    if FC:
        info = test_FC_compile(FC)
    else:
        try:
            FC = 'mpif77'
            info = test_FC_compile(FC)
        except CompilerError:
            try:
                FC = 'mpifort'
                info = test_FC_compile(FC)
            except CompilerError:
                raise CompilerError('No Fortran compiler found')
    if not CC:
        CC = 'mpicc'
    if not LD:
        LD = FC

    if not FFLAGS:
        FFLAGS = ['-I.', '-O3', '-DMPI', '-DMPIIO']
        if 'GNU' in info:
            FFLAGS += ['-fdefault-real-8', '-fdefault-double-8']
        elif 'INTEL' in info:
            FFLAGS += ['-r8']
        elif 'Portland' in info:
            FFLAGS += ['-r8']
        else:
            raise CompilerError("Unrecognized Fortran compiler.")
    if not CFLAGS:
        CFLAGS = ['-I.', '-O3', '-DMPIIO', '-DMPI', '-DUNDERSCORE',
                  '-DGLOBAL_LONG_LONG']
    if not LDFLAGS:
        LDFLAGS = ['-lblas', '-llapack']
        if 'GNU' in info:
            LDFLAGS += ['-lpthread']

    return FC, FFLAGS, CC, CFLAGS, LD, LDFLAGS


def write_makefile(app, usr, JL, FC, FFLAGS, CC, CFLAGS, LD, LDFLAGS):
    NEKBASE = os.path.join(NEK, 'src')
    nekfn = os.path.join(NEK, 'bin', 'Makefile.inc')
    fn = os.path.join(EXAMPLE, 'Makefile')
    with open(nekfn, 'r') as nekmake:
        with open(fn, 'w') as make:
            for line in nekmake:
                line = line.replace('?FC?', 'FC = {0}'.format(FC))
                line = line.replace('?FFLAGS?',
                                    'FFLAGS = {0}'.format(FFLAGS))
                line = line.replace('?CC?', 'CC = {0}'.format(CC))
                line = line.replace('?CFLAGS?',
                                    'CFLAGS = {0}'.format(CFLAGS))
                line = line.replace('?LD?', 'LD = {0}'.format(LD))
                line = line.replace('?LDFLAGS?',
                                    'LDFLAGS = {0}'.format(LDFLAGS))
                line = line.replace('?NEKBASE?',
                                    'NEKBASE = {0}'.format(NEKBASE))
                line = line.replace('?JLBASE?', 'JLBASE = {0}'.format(JL))
                line = line.replace('?APP?', 'APP = {0}'.format(app))
                line = line.replace('?USR?', 'USR = {0}'.format(usr))
                make.write(line)


def main():
    parser = argparse.ArgumentParser(description='Build a makefile')
    parser.add_argument('app',
                        help=('Which application you are targeting.'
                              ' Either maxwell, drift, or schrod'))
    parser.add_argument('usr', help='Which usr file to use')
    parser.add_argument('--arch', help='Use a predefined architecture')
    parser.add_argument('--jl', help='Specify path to the jl library')
    parser.add_argument('--FC', help='Fortran compiler to use')
    parser.add_argument('--FFLAGS', help='Fortran compiler flags')
    parser.add_argument('--extra-FFLAGS',
                        help='Extra Fortran compiler flags')
    parser.add_argument('--CC', help='C compiler to use')
    parser.add_argument('--CFLAGS', help='C compiler flags')
    parser.add_argument('--extra-CFLAGS',
                        help='Extra C compiler flags')
    parser.add_argument('--LD', help='Linker to use')
    parser.add_argument('--LDFLAGS', help='Linker flags')
    parser.add_argument('--extra-LDFLAGS', help='Extra linker flags')
    args = parser.parse_args()
    usr = args.usr + '.usr'
    if args.arch:
        if args.FC or args.FFLAGS or args.CC or args.CFLAGS:
            raise ValueError("can't set arch and compilers/flags")
        config = get_archflags(args.arch)
    else:
        config = configure(args.FC, args.FFLAGS,
                           args.CC, args.CFLAGS,
                           args.LD, args.LDFLAGS)
    FC, FFLAGS, CC, CFLAGS, LD, LDFLAGS = config
    if args.extra_FFLAGS:
        FFLAGS += args.extra_FFLAGS.split()
    if args.extra_CFLAGS:
        CFLAGS += args.extra_CFLAGS.split()
    if args.extra_LDFLAGS:
        LDFLAGS += args.extra_LDFLAGS.split()
    app = args.app
    if app == 'maxwell':
        FFLAGS.append('-DMAXWELL')
    elif app == 'drift':
        FFLAGS.append('-DDRIFT')
    elif app == 'schrod':
        FFLAGS.append('-DSCHROD')
    else:
        raise ValueError('Invalid application')
    FFLAGS = ' '.join(FFLAGS)
    CFLAGS = ' '.join(CFLAGS)
    LDFLAGS = ' '.join(LDFLAGS)
    if args.jl:
        JL = args.jl
    else:
        JL = os.path.join(NEK, 'src', 'jl')
    write_makefile(app, usr, JL, FC, FFLAGS, CC, CFLAGS, LD, LDFLAGS)


if __name__ == '__main__':
    main()
